import csv
import random
import math
import operator

def loadDataset(filename,split,training=[],test=[]):
    with open(filename,'r') as csvfile:
        lines=csv.reader(csvfile)
        dataset=list(lines)
    for x in range(1,len(dataset)-1):
        for y in range(4):
            dataset[x][y]=float(dataset[x][y])
        if random.random()<=split:
            training.append(dataset[x])
        else:
            test.append(dataset[x])

def euclideanDist(instance1,instance2,length):
    distance=0
    for x in range(length):
        distance+=pow((instance1[x]-instance2[x]),2)
    return math.sqrt(distance)


def getNeighbors(trainingSet,testIns,k):
    dist=[]
    length=len(testIns)-1
    for x in range(len(trainingSet)):
        distance=euclideanDist(testIns,trainingSet[x],length)
        dist.append((trainingSet[x],distance))
    dist.sort(key=operator.itemgetter(1))
    neighbors=[]
    for x in range(k):
        neighbors.append(dist[x][0])
    return neighbors
    
def getResponse(neighbors):
    classVotes={}
    for x in range(len(neighbors)):
        response=neighbors[x][-1]
        if response in classVotes:
            classVotes[response]+=1
        else:
            classVotes[response]=1
    #sortedVotes=sorted(classVotes.iteritems,key=operator.itemgetter(1),reverse=True)
    sortedVotes=sorted(classVotes,reverse=True)
    return sortedVotes[0]

def Accuracy(testSet,predictions):
    correct=0
    for x in range(len(testSet)):
        if (testSet[x][-1]==predictions[x]):
            correct+=1
    print('Accuracy: ')
    print(correct/float(len(testSet))*100)
    
def main():
    trainingSet=[]
    testSet=[]
    split=.67
    loadDataset(r'C:\Users\ssc\Documents\ml DS\irisDS\iris.txt',split,trainingSet,testSet)
    print('TrainSet: '+repr(len(trainingSet)))
    print('TestSet: '+repr(len(testSet)))
    k=3
    predictions=[]
    for x in range(len(testSet)):
        neigh=getNeighbors(trainingSet,testSet[x],k)
        result=getResponse(neigh)
        predictions.append(result)
        print('Predicted = '+repr(result)+' Actual = '+repr(testSet[x][-1]))
    Accuracy(testSet,predictions)
main()
        
